#!/usr/bin/env node

const program = require('commander');
const generate = require('../src/generate');
const chalk = require('chalk');
const fs = require('fs');
const path = require('path');
const Settings = require('../src/settings');
const _ = require('lodash');
const inquirer = require('inquirer');

let templateType = null;
let componentName = null;
let subDirectory = '';

program
	.usage('<template> [name]')
	.arguments('<template> [name]')
	.action((type, name) => {
		templateType = type;
		componentName = name;
	})
	.option('-d, --destination <destination>', 'Override destination')
	.option('-s, --sub-directory <directory>', 'Set subdirectory')
	.option('-p, --template-path <template-path>', 'Override template path')
	.option('-e, --template-extensions <extensions>', 'Comma-separated list of template extensions')
	.option('-f, --force', 'Force creation of a component')
	.option('-v, --variables <variables>', 'Set custom variables')
	.option('-w, --wizard', 'Use wizard to set custom variables')
	.parse(process.argv);

if (!templateType) {
	console.error(chalk.red('Type not set'));
	process.exit(1);
}

if (!componentName) {
	console.error(chalk.red('Name not set'));
	process.exit(1);
}

let settingsOverrides = {};

if (program.destination) {
	settingsOverrides['destination'] = program.destination;
}

if (program.subDirectory) {
	subDirectory = program.subDirectory;
}

if (program.templatePath) {
	settingsOverrides['templatePath'] = program.templatePath;
}

if (program.templateExtensions) {
	settingsOverrides['templateExtensions'] = program.templateExtensions.split(',');
}

const settings = Settings.getSettings(settingsOverrides);

if (!settings.templates[templateType]) {
	console.error(chalk.red(`Template ${templateType} doesn't exist in template folder.`));
	process.exit(1);
}
const defaultDestination = settings['destination'];

const destination = path.join(settingsOverrides['destination'] || settings.templates[templateType].destination || defaultDestination, subDirectory);

if (!fs.existsSync(destination) && !program.force) {
	console.error(chalk.red(`Destination path (${path.resolve(destination)}) doesn't exist. Use '-force' or '-f' to generate missing folders.`));
	process.exit(1);
}

let variables = null;
if (program.variables) {
	variables = parseVariables(program.variables);
}

if (program.wizard) {
	let templateSettings = Settings.getTemplateSettings(settings.templatePath)[templateType];

	if (templateSettings.variables) {
		inquirer.prompt(templateSettings.variables).then((answers) => {
			variables = _.merge(variables, answers);

			generateCode();
		});
	} else {
		generateCode();
	}
} else {
	generateCode();
}

function generateCode() {
	Promise.all(componentName.split(',').map((name) => {
		const options = {
			name: name,
			destination: destination,
			variables: variables,
			force: program.force
		};

		return generate(templateType, options, settings);
	})).then(() => {
		console.log();
		console.log(chalk.green('Done!'));
	});
}

function parseVariables(input) {
	input = input + ',';

	const result = {};

	const regexp = /([$A-Z_a-z0-9]+)=(([A-Z_\-a-z,0-9$])|([A-Z_\-a-z[,)]+]))+,/g;

	while (true) {
		let variable = (regexp.exec(input) || [])[0];

		if (!variable) {
			break;
		}

		const parts = variable.split('=');

		const name = parts[0];
		const value = (parts[1] || '').replace(/(\[|])+/g, '').replace(/[,;]$/, '');

		result[name] = value;
	}

	return result;
}
